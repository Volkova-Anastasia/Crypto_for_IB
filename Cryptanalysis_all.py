from Cipher_all import simple_decode, simple_code
from math import log10
from bigrams import bigramms_count, bigramms_freq
import regex as re
from collections import Counter
alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U','V', 'W', 'X', 'Y', 'Z']
symbols_occurrence = [8.17, 1.49, 2.78, 4.25, 12.7, 2.23, 2.02, 6.09, 6.97, 0.15, 0.77, 4.03, 2.41, 6.75, 7.51, 1.93, 0.1, 5.99, 6.33, 9.06, 2.76,0.98, 2.36,0.15, 1.97, 0.05]
p_marks = [' ', '.', ',', '-', '"', "'", '!', '?', '(', ')', '_', '{', '}', '[', ']', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '%', '‘', '’']
#text = 'Advances in medical science are resulting in prolonged lifespans but there is a knock-on effect for public health services, with many hospitals struggling to cope with an aging populace. Many countries enjoy the benefits of free or subsidised national public health services. However, there are some within senior health management who claim that such provision will become unsustainable, and I firmly agree that changes need to be made in order to reflect this changing reality. Despite the notion that healthcare should be ‘free’ , such care is predominantly funded by the taxpayer. To give a specific example, a recent report in my country established that almost 40% of the nation’s tax spending is distributed to healthcare and some 80% of that figure is reserved for treating the elderly. This is a disproportionate amount of money which has greatly increased the burden on the state and existing funding is no longer sufficient to meet these needs. This in turn impacts on the standard of care that can be provided as shown by numerous negative media reports about the conditions for both staff and patients. If we want quality healthcare then, clearly this financial burden needs to be alleviated. One way to do so would be to increase the contributions made by citizens through increased taxation. Alternatively, governments could encourage those who can afford it to take up private healthcare arrangements. By switching to a private model, the well-off can afford a higher quality of care, while at the same relieving pressure on public services for those who do not have the means to go private. One thing is for certain, an ageing population has increased the pressure on existing health provision. If we are going to maintain the standards of healthcare that we are used to, more funding needs to be found either through taxation, and alternative forms of provision should be considered. Otherwise, standards will fall and people’s lives will be put at risk.'
text = 'QWEQRTYU IR OYWITQP UTIYRTY QAY AYUSPDIRF IR GAHPHRFYW PIJYUGQRU KSD DLYAY IU Q ZRHTZ-HR YJJYTD JHA GSKPIT LYQPDL UYAEITYU, XIDL OQRC LHUGIDQPU UDASFFPIRF DH THGY XIDL QR QFIRF GHGSPQTY. OQRC THSRDAIYU YRVHC DLY KYRYJIDU HJ JAYY HA USKUIWIUYW RQDIHRQP GSKPIT LYQPDL UYAEITYU. LHXYEYA, DLYAY QAY UHOY XIDLIR UYRIHA LYQPDL OQRQFYOYRD XLH TPQIO DLQD USTL GAHEIUIHR XIPP KYTHOY SRUSUDQIRQKPY, QRW I JIAOPC QFAYY DLQD TLQRFYU RYYW DH KY OQWY IR HAWYA DH AYJPYTD DLIU TLQRFIRF AYQPIDC. WYUGIDY DLY RHDIHR DLQD LYQPDLTQAY ULHSPW KY ‘JAYY’, USTL TQAY IU GAYWHOIRQRDPC JSRWYW KC DLY DQBGQCYA. DH FIEY Q UGYTIJIT YBQOGPY, Q AYTYRD AYGHAD IR OC THSRDAC YUDQKPIULYW DLQD QPOHUD 40% HJ DLY RQDIHR’U DQB UGYRWIRF IU WIUDAIKSDYW DH LYQPDLTQAY QRW UHOY 80% HJ DLQD JIFSAY IU AYUYAEYW JHA DAYQDIRF DLY YPWYAPC. DLIU IU Q WIUGAHGHADIHRQDY QOHSRD HJ OHRYC XLITL LQU FAYQDPC IRTAYQUYW DLY KSAWYR HR DLY UDQDY QRW YBIUDIRF JSRWIRF IU RH PHRFYA USJJITIYRD DH OYYD DLYUY RYYWU. DLIU IR DSAR IOGQTDU HR DLY UDQRWQAW HJ TQAY DLQD TQR KY GAHEIWYW QU ULHXR KC RSOYAHSU RYFQDIEY OYWIQ AYGHADU QKHSD DLY THRWIDIHRU JHA KHDL UDQJJ QRW GQDIYRDU. IJ XY XQRD NSQPIDC LYQPDLTQAY DLYR, TPYQAPC DLIU JIRQRTIQP KSAWYR RYYWU DH KY QPPYEIQDYW.HRY XQC DH WH UH XHSPW KY DH IRTAYQUY DLY THRDAIKSDIHRU OQWY KC TIDIMYRU DLAHSFL IRTAYQUYW DQBQDIHR. QPDYARQDIEYPC, FHEYAROYRDU THSPW YRTHSAQFY DLHUY XLH TQR QJJHAW ID DH DQZY SG GAIEQDY LYQPDLTQAY QAAQRFYOYRDU. KC UXIDTLIRF DH Q GAIEQDY OHWYP, DLY XYPP-HJJ TQR QJJHAW Q LIFLYA NSQPIDC HJ TQAY, XLIPY QD DLY UQOY AYPIYEIRF GAYUUSAY HR GSKPIT UYAEITYU JHA DLHUY XLH WH RHD LQEY DLY OYQRU DH FH GAIEQDY.HRY DLIRF IU JHA TYADQIR, QR QFYIRF GHGSPQDIHR LQU IRTAYQUYW DLY GAYUUSAY HR YBIUDIRF LYQPDL GAHEIUIHR. IJ XY QAY FHIRF DH OQIRDQIR DLY UDQRWQAWU HJ LYQPDLTQAY DLQD XY QAY SUYW DH, OHAY JSRWIRF RYYWU DH KY JHSRW YIDLYA DLAHSFL DQBQDIHR, QRW QPDYARQDIEY JHAOU HJ GAHEIUIHR ULHSPW KY THRUIWYAYW. HDLYAXIUY, UDQRWQAWU XIPP JQPP QRW GYHGPY’U PIEYU XIPP KY GSD QD AIUZ.'
# text = 'EALETSWURTJWARSEPUSRWTSWEIWIWUDPMRTGRTHIYPYTGWAPRFWUHETUKDMMOWIWRUEVTYSVYTWFFWSMFYIHDKPRSOWEPMOUWILRSWUZRMOJETXOYUHRMEPUUMIDGGPRTGMYSYHWZRMOETEGRTGHYHDPESWJETXSYDTMIRWUWTQYXMOWKWTWFRMUYFFIWWYIUDKURARUWATEMRYTEPHDKPRSOWEPMOUWILRSWUOYZWLWIMOWIWEIWUYJWZRMORTUWTRYIOWEPMOJETEGWJWTMZOYSPERJMOEMUDSOHIYLRURYTZRPPKWSYJWDTUDUMERTEKPWETARFRIJPXEGIWWMOEMSOETGWUTWWAMYKWJEAWRTYIAWIMYIWFPWSMMORUSOETGRTGIWEPRMXAWUHRMWMOWTYMRYTMOEMOWEPMOSEIWUOYDPAKWFIWWUDSOSEIWRUHIWAYJRTETMPXFDTAWAKXMOWMECHEXWIMYGRLWEUHWSRFRSWCEJHPWEIWSWTMIWHYIMRTJXSYDTMIXWUMEKPRUOWAMOEMEPJYUMYFMOWTEMRYTUMECUHWTARTGRUARUMIRKDMWAMYOWEPMOSEIWETAUYJWYFMOEMFRGDIWRUIWUWILWAFYIMIWEMRTGMOWWPAWIPXMORURUEARUHIYHYIMRYTEMWEJYDTMYFJYTWXZORSOOEUGIWEMPXRTSIWEUWAMOWKDIAWTYTMOWUMEMWETAWCRUMRTGFDTARTGRUTYPYTGWIUDFFRSRWTMMYJWWMMOWUWTWWAUMORURTMDITRJHESMUYTMOWUMETAEIAYFSEIWMOEMSETKWHIYLRAWAEUUOYZTKXTDJWIYDUTWGEMRLWJWAREIWHYIMUEKYDMMOWSYTARMRYTUFYIKYMOUMEFFETAHEMRWTMURFZWZETMBDEPRMXOWEPMOSEIWMOWTSPWEIPXMORUFRTETSREPKDIAWTTWWAUMYKWEPPWLREMWAYTWZEXMYAYUYZYDPAKWMYRTSIWEUWMOWSYTMIRKDMRYTUJEAWKXSRMRNWTUMOIYDGORTSIWEUWAMECEMRYTEPMWITEMRLWPXGYLWITJWTMUSYDPAWTSYDIEGWMOYUWZOYSETEFFYIARMMYMEVWDHHIRLEMWOWEPMOSEIWEIIETGWJWTMUKXUZRMSORTGMYEHIRLEMWJYAWPMOWZWPPYFFSETEFFYIAEORGOWIBDEPRMXYFSEIWZORPWEMMOWUEJWIWPRWLRTGHIWUUDIWYTHDKPRSUWILRSWUFYIMOYUWZOYAYTYMOELWMOWJWETUMYGYHIRLEMWYTWMORTGRUFYISWIMERTETEGWRTGHYHDPEMRYTOEURTSIWEUWAMOWHIWUUDIWYTWCRUMRTGOWEPMOHIYLRURYTRFZWEIWGYRTGMYJERTMERTMOWUMETAEIAUYFOWEPMOSEIWMOEMZWEIWDUWAMYJYIWFDTARTGTWWAUMYKWFYDTAWRMOWIMOIYDGOMECEMRYTETAEPMWITEMRLWFYIJUYFHIYLRURYTUOYDPAKWSYTURAWIWAYMOWIZRUWUMETAEIAUZRPPFEPPETAHWYHPWUPRLWUZRPPKWHDMEMIRUV'
# text = 'EALETSMURTJMARSEPUSRMTSMEIMIMUDPWRTGRTHIYPYTGMAPRFMUHETUKDWWOMIMRUEVTYSVYTMFFMSWFYIHDKPRSOMEPWOUMILRSMUZRWOJETXOYUHRWEPUUWIDGGPRTGWYSYHMZRWOETEGRTGHYHDPESMJETXSYDTWIRMUMTQYXWOMKMTMFRWUYFFIMMYIUDKURARUMATEWRYTEPHDKPRSOMEPWOUMILRSMUOYZMLMIWOMIMEIMUYJMZRWORTUMTRYIOMEPWOJETEGMJMTWZOYSPERJWOEWUDSOHIYLRURYTZRPPKMSYJMDTUDUWERTEKPMETARFRIJPXEGIMMWOEWSOETGMUTMMAWYKMJEAMRTYIAMIWYIMFPMSWWORUSOETGRTGIMEPRWXAMUHRWMWOMTYWRYTWOEWOMEPWOSEIMUOYDPAKMFIMMUDSOSEIMRUHIMAYJRTETWPXFDTAMAKXWOMWECHEXMIWYGRLMEUHMSRFRSMCEJHPMEIMSMTWIMHYIWRTJXSYDTWIXMUWEKPRUOMAWOEWEPJYUWYFWOMTEWRYTUWECUHMTARTGRUARUWIRKDWMAWYOMEPWOSEIMETAUYJMYFWOEWFRGDIMRUIMUMILMAFYIWIMEWRTGWOMMPAMIPXWORURUEARUHIYHYIWRYTEWMEJYDTWYFJYTMXZORSOOEUGIMEWPXRTSIMEUMAWOMKDIAMTYTWOMUWEWMETAMCRUWRTGFDTARTGRUTYPYTGMIUDFFRSRMTWWYJMMWWOMUMTMMAUWORURTWDITRJHESWUYTWOMUWETAEIAYFSEIMWOEWSETKMHIYLRAMAEUUOYZTKXTDJMIYDUTMGEWRLMJMAREIMHYIWUEKYDWWOMSYTARWRYTUFYIKYWOUWEFFETAHEWRMTWURFZMZETWBDEPRWXOMEPWOSEIMWOMTSPMEIPXWORUFRTETSREPKDIAMTTMMAUWYKMEPPMLREWMAYTMZEXWYAYUYZYDPAKMWYRTSIMEUMWOMSYTWIRKDWRYTUJEAMKXSRWRNMTUWOIYDGORTSIMEUMAWECEWRYTEPWMITEWRLMPXGYLMITJMTWUSYDPAMTSYDIEGMWOYUMZOYSETEFFYIARWWYWEVMDHHIRLEWMOMEPWOSEIMEIIETGMJMTWUKXUZRWSORTGWYEHIRLEWMJYAMPWOMZMPPYFFSETEFFYIAEORGOMIBDEPRWXYFSEIMZORPMEWWOMUEJMIMPRMLRTGHIMUUDIMYTHDKPRSUMILRSMUFYIWOYUMZOYAYTYWOELMWOMJMETUWYGYHIRLEWMYTMWORTGRUFYISMIWERTETEGMRTGHYHDPEWRYTOEURTSIMEUMAWOMHIMUUDIMYTMCRUWRTGOMEPWOHIYLRURYTRFZMEIMGYRTGWYJERTWERTWOMUWETAEIAUYFOMEPWOSEIMWOEWZMEIMDUMAWYJYIMFDTARTGTMMAUWYKMFYDTAMRWOMIWOIYDGOWECEWRYTETAEPWMITEWRLMFYIJUYFHIYLRURYTUOYDPAKMSYTURAMIMAYWOMIZRUMUWETAEIAUZRPPFEPPETAHMYHPMUPRLMUZRPPKMHDWEWIRUV'
uniq_letters = []
counter = Counter(text.upper())
analyz_text = text.upper()
for i in analyz_text: # разбиваю текст на алфавит
    if i not in uniq_letters and i not in p_marks:
        uniq_letters.append(i)

# print(analyz_text)
#print(uniq_letters)
analyz_text = re.sub(r'[^A-Z]','',analyz_text) # удаляю лишние символы
count = 0
massive_freq = [0 for i in range(26)]
for i in range(len(analyz_text)): # считаю кол-во всех символов
    massive_freq[alphabet.index(analyz_text[i])] += 1

arr_my_frequency = []
for i in range(len(massive_freq)): # считаю частоту вхождения каждого символа своего алфавита в текст
    massive_freq[i] = (massive_freq[i] / len(analyz_text))

arr_my_frequency = sorted(massive_freq, reverse=True) # Сортирую полученные частоты в порядке убывания

first_key = []
for i in range(len(massive_freq)):
    sym_with_freq = alphabet[massive_freq.index(arr_my_frequency[i])]
    if sym_with_freq not in first_key:
        first_key.append(sym_with_freq)
    else:
        ravn_freq = arr_my_frequency[i]
        for k in range(len(massive_freq)):
            if massive_freq[k] == ravn_freq:
                next_sym_for_key = alphabet[k]
                if next_sym_for_key not in first_key:
                    first_key.append(next_sym_for_key)
                    break

# print(first_key) # отсортированные по  по частоте символы алфавита
print('Шифртекст', analyz_text)
def crypto_des(uniq_letters, first_key, analyz_text): # Расшифровываю шифртекст с помощью первого получившегося ключа first_key
    cry_result = list(analyz_text)
    for i in range(len(cry_result)):
        pos = first_key.index(cry_result[i])
        cry_result[i] = uniq_letters[pos]
    return (''.join(cry_result))

cipher_text = crypto_des(uniq_letters, first_key, analyz_text)
print('First key _ ', first_key)
print('Uniq letters', uniq_letters)
print('Analyz_text', analyz_text)
print('Первая расширфовка', cipher_text)
# print(crypto_des('Q W E R T Y U I O P A S D F G H J K L Z X C V B N M', 'V Y Q I R H U A L P W T S J F G O K E X C B Z N M D', 'QWEQRTYUIROYWITQPUTIYRTYQAYAYUSPDIRFIRGAHPHRFYWPIJYUGQRUKSDDLYAYIUQZRHTZHRYJJYTDJHAGSKPITLYQPDLUYAEITYUXIDLOQRCLHUGIDQPUUDASFFPIRFDHTHGYXIDLQRQFIRFGHGSPQTYOQRCTHSRDAIYUYRVHCDLYKYRYJIDUHJJAYYHAUSKUIWIUYWRQDIHRQPGSKPITLYQPDLUYAEITYULHXYEYADLYAYQAYUHOYXIDLIRUYRIHALYQPDLOQRQFYOYRDXLHTPQIODLQDUSTLGAHEIUIHRXIPPKYTHOYSRUSUDQIRQKPYQRWIJIAOPCQFAYYDLQDTLQRFYURYYWDHKYOQWYIRHAWYADHAYJPYTDDLIUTLQRFIRFAYQPIDCWYUGIDYDLYRHDIHRDLQDLYQPDLTQAYULHSPWKYJAYYUSTLTQAYIUGAYWHOIRQRDPCJSRWYWKCDLYDQBGQCYADHFIEYQUGYTIJITYBQOGPYQAYTYRDAYGHADIROCTHSRDACYUDQKPIULYWDLQDQPOHUDHJDLYRQDIHRUDQBUGYRWIRFIUWIUDAIKSDYWDHLYQPDLTQAYQRWUHOYHJDLQDJIFSAYIUAYUYAEYWJHADAYQDIRFDLYYPWYAPCDLIUIUQWIUGAHGHADIHRQDYQOHSRDHJOHRYCXLITLLQUFAYQDPCIRTAYQUYWDLYKSAWYRHRDLYUDQDYQRWYBIUDIRFJSRWIRFIURHPHRFYAUSJJITIYRDDHOYYDDLYUYRYYWUDLIUIRDSARIOGQTDUHRDLYUDQRWQAWHJTQAYDLQDTQRKYGAHEIWYWQUULHXRKCRSOYAHSURYFQDIEYOYWIQAYGHADUQKHSDDLYTHRWIDIHRUJHAKHDLUDQJJQRWGQDIYRDUIJXYXQRDNSQPIDCLYQPDLTQAYDLYRTPYQAPCDLIUJIRQRTIQPKSAWYRRYYWUDHKYQPPYEIQDYWHRYXQCDHWHUHXHSPWKYDHIRTAYQUYDLYTHRDAIKSDIHRUOQWYKCTIDIMYRUDLAHSFLIRTAYQUYWDQBQDIHRQPDYARQDIEYPCFHEYAROYRDUTHSPWYRTHSAQFYDLHUYXLHTQRQJJHAWIDDHDQZYSGGAIEQDYLYQPDLTQAYQAAQRFYOYRDUKCUXIDTLIRFDHQGAIEQDYOHWYPDLYXYPPHJJTQRQJJHAWQLIFLYANSQPIDCHJTQAYXLIPYQDDLYUQOYAYPIYEIRFGAYUUSAYHRGSKPITUYAEITYUJHADLHUYXLHWHRHDLQEYDLYOYQRUDHFHGAIEQDYHRYDLIRFIUJHATYADQIRQRQFYIRFGHGSPQDIHRLQUIRTAYQUYWDLYGAYUUSAYHRYBIUDIRFLYQPDLGAHEIUIHRIJXYQAYFHIRFDHOQIRDQIRDLYUDQRWQAWUHJLYQPDLTQAYDLQDXYQAYSUYWDHOHAYJSRWIRFRYYWUDHKYJHSRWYIDLYADLAHSFLDQBQDIHRQRWQPDYARQDIEYJHAOUHJGAHEIUIHRULHSPWKYTHRUIWYAYWHDLYAXIUYUDQRWQAWUXIPPJQPPQRWGYHGPYUPIEYUXIPPKYGSDQDAIUZ' ))
print(crypto_des('E A L T S W U R J P I D M G H Y F K O V Z X Q C B N', 'V Y Q I R H U A L P W T S J F G O K E X C B Z N M D' , 'EALETSWURTJWARSEPUSRWTSWEIWIWUDPMRTGRTHIYPYTGWAPRFWUHETUKDMMOWIWRUEVTYSVYTWFFWSMFYIHDKPRSOWEPMOUWILRSWUZRMOJETXOYUHRMEPUUMIDGGPRTGMYSYHWZRMOETEGRTGHYHDPESWJETXSYDTMIRWUWTQYXMOWKWTWFRMUYFFIWWYIUDKURARUWATEMRYTEPHDKPRSOWEPMOUWILRSWUOYZWLWIMOWIWEIWUYJWZRMORTUWTRYIOWEPMOJETEGWJWTMZOYSPERJMOEMUDSOHIYLRURYTZRPPKWSYJWDTUDUMERTEKPWETARFRIJPXEGIWWMOEMSOETGWUTWWAMYKWJEAWRTYIAWIMYIWFPWSMMORUSOETGRTGIWEPRMXAWUHRMWMOWTYMRYTMOEMOWEPMOSEIWUOYDPAKWFIWWUDSOSEIWRUHIWAYJRTETMPXFDTAWAKXMOWMECHEXWIMYGRLWEUHWSRFRSWCEJHPWEIWSWTMIWHYIMRTJXSYDTMIXWUMEKPRUOWAMOEMEPJYUMYFMOWTEMRYTUMECUHWTARTGRUARUMIRKDMWAMYOWEPMOSEIWETAUYJWYFMOEMFRGDIWRUIWUWILWAFYIMIWEMRTGMOWWPAWIPXMORURUEARUHIYHYIMRYTEMWEJYDTMYFJYTWXZORSOOEUGIWEMPXRTSIWEUWAMOWKDIAWTYTMOWUMEMWETAWCRUMRTGFDTARTGRUTYPYTGWIUDFFRSRWTMMYJWWMMOWUWTWWAUMORURTMDITRJHESMUYTMOWUMETAEIAYFSEIWMOEMSETKWHIYLRAWAEUUOYZTKXTDJWIYDUTWGEMRLWJWAREIWHYIMUEKYDMMOWSYTARMRYTUFYIKYMOUMEFFETAHEMRWTMURFZWZETMBDEPRMXOWEPMOSEIWMOWTSPWEIPXMORUFRTETSREPKDIAWTTWWAUMYKWEPPWLREMWAYTWZEXMYAYUYZYDPAKWMYRTSIWEUWMOWSYTMIRKDMRYTUJEAWKXSRMRNWTUMOIYDGORTSIWEUWAMECEMRYTEPMWITEMRLWPXGYLWITJWTMUSYDPAWTSYDIEGWMOYUWZOYSETEFFYIARMMYMEVWDHHIRLEMWOWEPMOSEIWEIIETGWJWTMUKXUZRMSORTGMYEHIRLEMWJYAWPMOWZWPPYFFSETEFFYIAEORGOWIBDEPRMXYFSEIWZORPWEMMOWUEJWIWPRWLRTGHIWUUDIWYTHDKPRSUWILRSWUFYIMOYUWZOYAYTYMOELWMOWJWETUMYGYHIRLEMWYTWMORTGRUFYISWIMERTETEGWRTGHYHDPEMRYTOEURTSIWEUWAMOWHIWUUDIWYTWCRUMRTGOWEPMOHIYLRURYTRFZWEIWGYRTGMYJERTMERTMOWUMETAEIAUYFOWEPMOSEIWMOEMZWEIWDUWAMYJYIWFDTARTGTWWAUMYKWFYDTAWRMOWIMOIYDGOMECEMRYTETAEPMWITEMRLWFYIJUYFHIYLRURYTUOYDPAKWSYTURAWIWAYMOWIZRUWUMETAEIAUZRPPFEPPETAHWYHPWUPRLWUZRPPKWHDMEMIRUV'))

bigramms_count = {}
for i in range(1, len(cipher_text)): #Считаю количество различных биграмм в своем шифртексте (1)
    if cipher_text[i-1] + cipher_text[i] in bigramms_count:
        bigramms_count[cipher_text[i-1] + cipher_text[i]] += 1
    else:
        bigramms_count[cipher_text[i - 1] + cipher_text[i]] = 0
print(bigramms_count)
for k, i in bigramms_freq.items(): # Считаю частоту встречаемости каждой биграммы в тексте
    bigramms_freq[k] = (bigramms_freq[k] / 4916301)

Count_rating_bigramm = 0
for k, i in bigramms_count.items(): # Считаю рейтинг биграмм для Шифртекста (1)
    if (bigramms_count[k] != 0) and (bigramms_count[k] in bigramms_freq):
        Count_rating_bigramm = bigramms_count[k] * log10(bigramms_freq[k])
    else:
        Count_rating_bigramm = Count_rating_bigramm + log10(0.001)

var = 1
while True:
    last_step = False
    for i in range(0, 26):
        if i + var >= 26:
            break
        for_reverce = first_key[i]
        first_key[i] = first_key[i + var]
        first_key[i + var] = for_reverce

        print(first_key)

        uniq_letters = []
        for j in cipher_text:
            if j not in uniq_letters and j not in p_marks:
                uniq_letters.append(j)

        cipher_text_new = crypto_des(uniq_letters, first_key, analyz_text)
        bigramms_count = {}
        for f in range(1, len(cipher_text)):  # Считаю количество различных биграмм в своем шифртексте (1)
            if cipher_text[f - 1] + cipher_text[f] in bigramms_count:
                bigramms_count[cipher_text[f - 1] + cipher_text[f]] = bigramms_count[cipher_text[f - 1] + cipher_text[f]] + 1

        new_rating_bigramm = 0
        for e, r in bigramms_count.items():  # Считаю рейтинг биграмм для Шифртекста
            if (bigramms_count[e] != 0) and (bigramms_count[e] in bigramms_freq):
                new_rating_bigramm = bigramms_count[e] * log10(bigramms_freq[e])
            else:
                new_rating_bigramm = new_rating_bigramm + log10(0.001)

        if new_rating_bigramm > Count_rating_bigramm:
            last_step = True
            Count_rating_bigramm = new_rating_bigramm

            var = 1
            break
        else:
            print(i, var)
            revers = first_key[i]
            first_key[i] = first_key[i + var]
            first_key[i + var] = revers

            for u in cipher_text:
                if u not in uniq_letters and u not in p_marks:
                    uniq_letters.append(u)

            cipher_text_new = crypto_des(uniq_letters, first_key, analyz_text)
            bigramms_count = {}
            for i in range(1, len(cipher_text)):  # Считаю количество различных биграмм в своем шифртексте (1)
                if cipher_text[i - 1] + cipher_text[i] in bigramms_count:
                    bigramms_count[cipher_text[i - 1] + cipher_text[i]] = bigramms_count[cipher_text[i - 1] + cipher_text[i]] + 1

        if last_step == False:
            var = var + 1
            if var >= 25:
                break
        #print(Count_rating_bigramm, new_rating_bigramm)
    # print(cipher_text)
print(first_key)

# print(crypto_des('Q W E R T Y U I O P A S D F G H J K L Z X C V B N M', 'Y D Q I R H U A L P W T S J F G O K E X C B Z N M V', 'QWEQRTYUIROYWITQPUTIYRTYQAYAYUSPDIRFIRGAHPHRFYWPIJYUGQRUKSDDLYAYIUQZRHTZHRYJJYTDJHAGSKPITLYQPDLUYAEITYUXIDLOQRCLHUGIDQPUUDASFFPIRFDHTHGYXIDLQRQFIRFGHGSPQTYOQRCTHSRDAIYUYRVHCDLYKYRYJIDUHJJAYYHAUSKUIWIUYWRQDIHRQPGSKPITLYQPDLUYAEITYULHXYEYADLYAYQAYUHOYXIDLIRUYRIHALYQPDLOQRQFYOYRDXLHTPQIODLQDUSTLGAHEIUIHRXIPPKYTHOYSRUSUDQIRQKPYQRWIJIAOPCQFAYYDLQDTLQRFYURYYWDHKYOQWYIRHAWYADHAYJPYTDDLIUTLQRFIRFAYQPIDCWYUGIDYDLYRHDIHRDLQDLYQPDLTQAYULHSPWKYJAYYUSTLTQAYIUGAYWHOIRQRDPCJSRWYWKCDLYDQBGQCYADHFIEYQUGYTIJITYBQOGPYQAYTYRDAYGHADIROCTHSRDACYUDQKPIULYWDLQDQPOHUDHJDLYRQDIHRUDQBUGYRWIRFIUWIUDAIKSDYWDHLYQPDLTQAYQRWUHOYHJDLQDJIFSAYIUAYUYAEYWJHADAYQDIRFDLYYPWYAPCDLIUIUQWIUGAHGHADIHRQDYQOHSRDHJOHRYCXLITLLQUFAYQDPCIRTAYQUYWDLYKSAWYRHRDLYUDQDYQRWYBIUDIRFJSRWIRFIURHPHRFYAUSJJITIYRDDHOYYDDLYUYRYYWUDLIUIRDSARIOGQTDUHRDLYUDQRWQAWHJTQAYDLQDTQRKYGAHEIWYWQUULHXRKCRSOYAHSURYFQDIEYOYWIQAYGHADUQKHSDDLYTHRWIDIHRUJHAKHDLUDQJJQRWGQDIYRDUIJXYXQRDNSQPIDCLYQPDLTQAYDLYRTPYQAPCDLIUJIRQRTIQPKSAWYRRYYWUDHKYQPPYEIQDYWHRYXQCDHWHUHXHSPWKYDHIRTAYQUYDLYTHRDAIKSDIHRUOQWYKCTIDIMYRUDLAHSFLIRTAYQUYWDQBQDIHRQPDYARQDIEYPCFHEYAROYRDUTHSPWYRTHSAQFYDLHUYXLHTQRQJJHAWIDDHDQZYSGGAIEQDYLYQPDLTQAYQAAQRFYOYRDUKCUXIDTLIRFDHQGAIEQDYOHWYPDLYXYPPHJJTQRQJJHAWQLIFLYANSQPIDCHJTQAYXLIPYQDDLYUQOYAYPIYEIRFGAYUUSAYHRGSKPITUYAEITYUJHADLHUYXLHWHRHDLQEYDLYOYQRUDHFHGAIEQDYHRYDLIRFIUJHATYADQIRQRQFYIRFGHGSPQDIHRLQUIRTAYQUYWDLYGAYUUSAYHRYBIUDIRFLYQPDLGAHEIUIHRIJXYQAYFHIRFDHOQIRDQIRDLYUDQRWQAWUHJLYQPDLTQAYDLQDXYQAYSUYWDHOHAYJSRWIRFRYYWUDHKYJHSRWYIDLYADLAHSFLDQBQDIHRQRWQPDYARQDIEYJHAOUHJGAHEIUIHRULHSPWKYTHRUIWYAYWHDLYAXIUYUDQRWQAWUXIPPJQPPQRWGYHGPYUPIEYUXIPPKYGSDQDAIUZ'))
# Мы получили ключ V D Q I R H U A L P W T S J F G O K E X C B Z N M Y
# Подставив его в расшифровку для шифра простой замены, мы получим шифртекст, зашифрованный по первому ключу, с изначальными частотами
#